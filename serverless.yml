service: dutch-auction
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    AWS_ACCOUNT_ID:
      Ref: "AWS::AccountId"
    DYNAMODB_TABLE: AuctionStates-${self:provider.stage}
    NOSTR_PUBLIC_KEY: "d5e19bcba9c3442bae90beea0dee2e5760177ee7ac5d4196118e657bbb302141"

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: "Allow"
          Action:
            - "events:PutEvents"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "states:StartExecution"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "*"
        - Effect: Allow
          Action:
            - ssm:Describe*
            - ssm:Get*
            - ssm:List*
          Resource: "*"

functions:
  createAuction:
    handler: handler.createAuction
    events:
      - http:
          path: createAuction
          method: post
          cors: true
  getAuctionStatus:
    handler: handler.getAuctionStatus
    events:
      - http:
          path: auctions/{auctionId}
          method: get
          cors: true
  getAuctions:
    handler: handler.getAuctions
    events:
      - http:
          path: auctions
          method: get
          cors: true
  startAuction:
    environment:
      STATE_MACHINE_ARN: arn:aws:states:us-east-1:#{AWS::AccountId}:stateMachine:DutchAuctionStateMachine-${self:provider.stage}
    handler: handler.startAuction
    events:
      - eventBridge:
          pattern:
            source:
              - "dutch-auction.start"
            detail-type:
              - "AuctionScheduled"

  updateAuctionStatus:
    handler: handler.updateAuctionStatus
  finishAuction:
    handler: handler.finishAuction

stepFunctions:
  stateMachines:
    DutchAuctionStateMachine:
      name: DutchAuctionStateMachine-${self:provider.stage}
      definition:
        Comment: "A Step Function to manage the Dutch Auction process."
        StartAt: InitializeAuction
        States:
          InitializeAuction:
            Type: Pass
            ResultPath: "$"
            Next: updateAuctionStatus
          updateAuctionStatus:
            Type: Task
            Resource:
              Fn::GetAtt: [updateAuctionStatus, Arn]
            ResultPath: "$"
            Next: IsAuctionFinished
          IsAuctionFinished:
            Type: Choice
            Choices:
              - Variable: "$.currentPrice"
                NumericLessThanEqualsPath: "$.reservePrice"
                Next: AuctionFinished
              - Variable: "$.auctionFinished"
                BooleanEquals: true
                Next: AuctionFinished
            Default: WaitRoundDuration
          WaitRoundDuration:
            Type: Wait
            SecondsPath: "$.decreaseInterval"
            Next: updateAuctionStatus
          AuctionFinished:
            Type: Task
            Resource:
              Fn::GetAtt: [finishAuction, Arn]
            End: true
resources:
  Resources:
    AuctionStatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  serverlessSsmFetch:
    NOSTR_PRIVATE_KEY: NOSTR_PRIVATE_KEY~true

plugins:
  - serverless-step-functions
  - serverless-ssm-fetch
